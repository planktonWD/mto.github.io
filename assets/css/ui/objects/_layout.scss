/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/

/**
* ### Layout
* <span class="epsilon">ui/objects/layout.scss</span> <br>
* The inuitcss layout system uses `box-sizing: border-box;` and
* `display: inline-block;` to create an extremely powerful, flexible
* alternative to the traditional grid system. Combine the layout items with
* the widths found in `trumps.widths`.
* `.layout` is the container and `.layout__item` is the grid elements. Just add `.u-1/2` to the `.layout__item` !!MAKE SURE WHITE SPACE IS CLEARED
*
*/



$layout-gutter:           $base-spacing-unit !default;
$layout-gutter--tiny:       quarter($layout-gutter) !default;
$layout-gutter--small:        halve($layout-gutter) !default;
$layout-gutter--large:       double($layout-gutter) !default;
$layout-gutter--huge:     quadruple($layout-gutter) !default;

$enable-layout--tiny:     false !default;
$enable-layout--small:    false !default;
$enable-layout--large:    false !default;
$enable-layout--huge:     false !default;
$enable-layout--flush:    false !default;
$enable-layout--rev:      false !default;
$enable-layout--middle:   false !default;
$enable-layout--bottom:   false !default;
$enable-layout--right:    false !default;
$enable-layout--center:   false !default;
$enable-layout--auto:     false !default;





// Here we set a variable assuming that `box-sizing: border-box;` is not set
// globally. If it has been previously been defined, the following variable will
// be overriden and will be set to `true`.
$global-border-box: false !default;





.layout,
%layout {
    list-style: none;
    margin:  0;
    padding: 0;
    margin-left: -$layout-gutter;
}


    .layout__item,
    %layout__item {
        display: inline-block; /* [1] */
        padding-left: $layout-gutter; /* [2] */
        vertical-align: top; /* [3] */
        width: 100%; /* [4] */
        position: relative;
        float: none !important;

        @if $global-border-box == false {
            -webkit-box-sizing: border-box; /* [5] */
               -moz-box-sizing: border-box; /* [5] */
                    box-sizing: border-box; /* [5] */
        }

    }

    @include bp(full-nav) {

        .layout--table {
            display: table !important;
        }

        .layout__item--table-cell {
            display: table-cell !important;
        }

    }






@if ($enable-layout--tiny == true) {

    /**
     * Layouts with tiny gutters.
     */

    .layout--tiny,
    %layout--tiny {
        margin-left: -($layout-gutter--tiny);

        > .layout__item,
        > %layout__item {
            padding-left: $layout-gutter--tiny;
        }

    }

}

@if ($enable-layout--small == true) {

    /**
     * Layouts with small gutters.
     */

    .layout--small,
    %layout--small {
        margin-left: -($layout-gutter--small);

        > .layout__item,
        > %layout__item {
            padding-left: $layout-gutter--small;
        }

    }

}

@if ($enable-layout--large == true) {

    /**
     * Layouts with large gutters.
     */

    .layout--large,
    %layout--large {
        margin-left: -($layout-gutter--large);

        > .layout__item,
        > %layout__item {
            padding-left: $layout-gutter--large;
        }

    }

}

@if ($enable-layout--huge == true) {

    /**
     * Layouts with huge gutters.
     */

    .layout--huge,
    %layout--huge {
        margin-left: -($layout-gutter--huge);

        > .layout__item,
        > %layout__item {
            padding-left: $layout-gutter--huge;
        }

    }

}





@if ($enable-layout--flush == true) {

    /**
     * Layouts with no gutters.
     */

    .layout--flush,
    %layout--flush {
        margin-left: 0;

        > .layout__item,
        > %layout__item {
            padding-left: 0;
        }

    }

}





@if ($enable-layout--rev == true) {

    /**
     * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
     * markup will display in order 4, 3, 2, 1 on your page.
     */

    .layout--rev,
    %layout--rev {
        direction: rtl;
        text-align: left;

        > .layout__item,
        > %layout__item {
            direction: ltr;
            text-align: left;
        }

    }

}





@if ($enable-layout--middle == true) {

    /**
     * Align layout items to the vertical centers of each other.
     */

    .layout--middle,
    %layout--middle {

        > .layout__item,
        > %layout__item {
            vertical-align: middle;
        }

    }

}

@if ($enable-layout--bottom == true) {

    /**
     * Align layout items to the vertical bottoms of each other.
     */

    .layout--bottom,
    %layout--bottom {

        > .layout__item,
        > %layout__item {
            vertical-align: bottom;
        }

    }

}





@if ($enable-layout--right == true) {

    /**
     * Make the layout items fill up from the right hand side.
     */

    .layout--right,
    %layout--right {
        text-align: right;

        > .layout__item,
        > %layout__item {
            text-align: left;
        }

    }

}

@if ($enable-layout--center == true) {

    /**
     * Make the layout items fill up from the center outward.
     */

    .layout--center,
    %layout--center {
        text-align: center;

        > .layout__item,
        > %layout__item {
            text-align: left;
        }

    }

}





@if ($enable-layout--auto == true) {

    /**
     * Cause layout items to take up a non-explicit amount of width.
     */
    .layout--auto,
    %layout--auto {

        > .layout__item,
        > %layout__item {
            width: auto;
        }

    }

}
